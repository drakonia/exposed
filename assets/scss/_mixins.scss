// ==========================================================================
// Mixins
// ==========================================================================


/// Generate heading font size styles including size reduction
///
/// Couples Foundation's `$h*-font-size` and `$h*-font-reduction` variables.
///
/// @access public
/// @param {number} $h-level - Heading level number
/// @param {bool}   $do-reduction [true] - Include reduction sizing?
@mixin h-size( $h-level, $do-reduction: true ) {
  @if not is-number( $h-level ) {
    @error 'Parameter `$h-level` with value `#{$h-level}` is not a number!';
  }

  $h-level-cl: clamp($h-level, 1, 6);
  @if $h-level-cl != $h-level {
    @error 'Parameter `$h-level` with value `#{$h-level}` is not a valid heading level!';
  }

  $base-size: map-fetch($h-sizes, $h-level);
  $size: $base-size;
  @if $do-reduction {
    $size: $size - map-fetch($h-size-reduction, $h-level);
  }

  font-size: $size;

  @include media-breakpoint-up(md) {
    font-size: $base-size;
  }
}


//
// Grid
// ==========================================================================
// Largely copied from Bootstrap v4-beta


@mixin grid-container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

@mixin grid-row {
  display: flex;
  flex-wrap: wrap;
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
}

@mixin grid-col-ready {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  min-height: 1px; // Prevent collapsing
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

@mixin grid-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin grid-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}
